#
# uncrustify config file for the C langage
#


# The type of line endings
# auto/lf/crlf/cr
newlines = auto

# How to use tabs when indenting code
# 0=spaces only
# 1=indent with tabs to brace level, align with spaces
# 2=indent and align with tabs, using spaces when not on a tabstop
indent_with_tabs = 0
input_tab_size   = 4
output_tab_size  = 4
indent_columns   = output_tab_size

# How to indent goto labels
#  >0 : absolute column where 1 is the leftmost column
#  <=0 : subtract from brace indent
indent_label = 1



#
# indentation
#
indent_namespace        = true
indent_namespace_level  = 4
indent_class            = true
indent_member           = 0
indent_func_const       = 0
indent_func_proto_param = true

#
# inter-symbol newlines
#

nl_enum_brace       = remove    # "enum {" vs "enum \n {"
nl_union_brace      = remove    # "union {" vs "union \n {"
nl_struct_brace     = remove    # "struct {" vs "struct \n {"
nl_do_brace         = force     # "do {" vs "do \n {"
nl_if_brace         = force     # "if () {" vs "if () \n {"
nl_for_brace        = force     # "for () {" vs "for () \n {"
nl_else_brace       = force     # "else {" vs "else \n {"
nl_while_brace      = force     # "while () {" vs "while () \n {"
nl_switch_brace     = force     # "switch () {" vs "switch () \n {"
nl_brace_while      = add       # "} while" vs "} \n while" - cuddle while
nl_brace_else       = add       # "} else" vs "} \n else" - cuddle else
nl_func_var_def_blk = 1         # number of blank lines after a block of variable definitions at the top of a function body
nl_fcall_brace      = remove    # "list_for_each() {" vs "list_for_each()\n{"
nl_fdef_brace       = add       # "int foo() {" vs "int foo()\n{"
nl_after_return     = false
nl_before_case      = true
nl_before_if        = force
nl_before_for       = force


#
# Source code modifications
#
mod_paren_on_return     = remove    # "return 1;" vs "return (1);"
mod_full_brace_if       = force     # "if (a) { a--; }" vs "if (a) a--;"
mod_full_brace_for      = force     # "for () { a--; }" "for () a--;"
mod_full_brace_do       = force     # "do { a--; } while ();" vs "do a--; while ();"
mod_full_brace_while    = force     #  "while (a) { a--; }" vs "while (a) a--;"
mod_full_brace_nl       = 3         # do not remove if more than 3 newlines
mod_full_brace_function = force

#
# inter-character spacing options
#
sp_sizeof_paren         = remove    # "sizeof (int)" vs "sizeof(int)"
sp_before_sparen        = force     # "if (" vs "if("
sp_after_sparen         = force     # "if () {" vs "if (){"
sp_after_cast           = remove    # "(int) a" vs "(int)a"
sp_inside_braces        = add       # "{ 1 }" vs "{1}"
sp_inside_braces_struct = add       # "{ 1 }" vs "{1}"
sp_inside_braces_enum   = add       # "{ 1 }" vs "{1}"
sp_assign               = add
sp_arith                = add
sp_bool                 = add
sp_compare              = add
sp_assign               = add
sp_enum_assign          = add
sp_after_comma          = add
sp_func_def_paren       = remove    # "int foo (){" vs "int foo(){"
sp_func_call_paren      = remove    # "foo (" vs "foo("
sp_func_proto_paren     = remove    # "int foo ();" vs "int foo();"
sp_cmt_cpp_start        = add       # "// A" vs "//A"
sp_endif_cmt            = add       # "#endif//" vs "#endif //"
sp_after_new            = add
sp_after_semi           = add       # ";//" vs "; //"
sp_after_cast           = add

# Add or remove space after ';' in non-empty 'for' statements. Default=Force
sp_after_semi_for                        = force

# Add or remove space before '[' (except '[]')
sp_before_square                         = remove

# Add or remove space before '[]'
sp_before_squares                        = remove

# Add or remove space inside a non-empty '[' and ']'
sp_inside_square                         = remove

# Add or remove space after ','
sp_after_comma                           = force

# Add or remove space before ','
sp_before_comma                          = remove

# Add or remove space between an open paren and comma: '(,' vs '( ,'
sp_paren_comma                           = force

# Add or remove space after class ':'
sp_after_class_colon                     = force

# Add or remove space before class ':'
sp_before_class_colon                    = force

# Add or remove space before case ':'. Default=Remove
sp_before_case_colon                     = remove

# Add or remove space between 'operator' and operator sign
sp_after_operator                        = remove

# Add or remove space between the operator symbol and the open paren, as in 'operator ++('
sp_after_operator_sym                    = remove

# Add or remove spaces inside cast parens
sp_inside_paren_cast                     = remove

# Add or remove space between the type and open paren in a C++ cast, i.e. 'int(exp)' vs 'int (exp)'
sp_cpp_cast_paren                        = remove

# Add or remove space between 'throw' and '(' in 'throw (something)'
sp_throw_paren                           = remove

# Add or remove space between 'else' and '{' if on the same line
sp_else_brace                            = add

# Add or remove space between '}' and 'else' if on the same line
sp_brace_else                            = add

# Add or remove space between '}' and the name of a typedef on the same line
sp_brace_typedef                         = add

# Add or remove space between 'catch' and '{' if on the same line
sp_catch_brace                           = add

# Add or remove space between '}' and 'catch' if on the same line
sp_brace_catch                           = add

# Add or remove space between 'finally' and '{' if on the same line
sp_finally_brace                         = add

# Add or remove space between '}' and 'finally' if on the same line
sp_brace_finally                         = add

# Add or remove space between 'try' and '{' if on the same line
sp_try_brace                             = add

# Add or remove space before the '::' operator
sp_before_dc                             = remove

# Add or remove space after the '::' operator
sp_after_dc                              = remove

# Add or remove space after the '!' (not) operator. Default=Remove
sp_not                                   = remove

# Add or remove space after the '~' (invert) operator. Default=Remove
sp_inv                                   = remove

# Add or remove space after the '&' (address-of) operator. Default=Remove
# This does not affect the spacing after a '&' that is part of a type.
sp_addr                                  = remove




#
# Aligning stuff
#

align_with_tabs     = false      # use tabs to align
align_on_tabstop    = TRUE      # align on tabstops
align_enum_equ_span     = 4     # '=' in enum definition
align_struct_init_span  = 3     # align stuff in a structure init '= { }'
align_right_cmt_span    = 3

#
# Preprocessor options
#
pp_indent          = add
pp_indent_at_level = true     # false/true
pp_indent_count    = 4        # number
pp_define_at_level = false    # false/true
